// Generated by CoffeeScript 1.8.0
(function() {
  var Board, Const, Game, Player,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {
    var Tictactoe;
    Tictactoe = new Game;
    FastClick.attach(document.body);
  });

  Const = (function() {
    function Const() {}

    Const.NOUGHT = 1;

    Const.CROSS = -1;

    Const.DRAW = 0;

    Const.MAX_VALUE = 9;

    Const.MIN_VALUE = -9;

    Const.LIMIT = 6;

    return Const;

  })();

  Board = (function(_super) {
    __extends(Board, _super);

    function Board(args) {
      this.wonorlost = __bind(this.wonorlost, this);
      this.display = __bind(this.display, this);
      this.init = __bind(this.init, this);
      this.clone = __bind(this.clone, this);
      var i, _i, _ref;
      for (i = _i = 0, _ref = args.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.push(args[i]);
      }
      this.canvas = document.getElementById("canvasMain");
      this.canvas.width = 600;
      this.canvas.height = 600;
      this.lines = [];
      this.lines.push([0, 1, 2]);
      this.lines.push([3, 4, 5]);
      this.lines.push([6, 7, 8]);
      this.lines.push([0, 3, 6]);
      this.lines.push([1, 4, 7]);
      this.lines.push([2, 5, 8]);
      this.lines.push([0, 4, 8]);
      this.lines.push([2, 4, 6]);
      this.weight = [1, 0, 1, 0, 2, 0, 1, 0, 1];
    }

    Board.prototype.clone = function() {
      var buf, i, temp, _i, _len, _results;
      buf = new Array(this.length);
      _results = [];
      for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
        temp = this[i];
        _results.push(buf[i] = temp);
      }
      return _results;
    };

    Board.prototype.init = function() {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this[i] = null;
      }
      return this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };

    Board.prototype.display = function() {
      var i, x, y, _i, _ref;
      this.context = this.canvas.getContext('2d');
      this.context.beginPath();
      this.context.fillStyle = "#ffffff";
      this.context.strokeStyle = "#000000";
      this.context.lineWidth = 3;
      this.context.moveTo(200, 0);
      this.context.lineTo(200, 600);
      this.context.moveTo(400, 0);
      this.context.lineTo(400, 600);
      this.context.moveTo(0, 200);
      this.context.lineTo(600, 200);
      this.context.moveTo(0, 400);
      this.context.lineTo(600, 400);
      for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        x = 200 * (i % 3);
        y = 200 * Math.floor(i / 3);
        if (this[i] === Const.NOUGHT) {
          this.context.moveTo(x + 200, y + 100);
          this.context.arc(x + 100, y + 100, 100, 0, Math.PI * 2, false);
        } else if (this[i] === Const.CROSS) {
          this.context.moveTo(x, y);
          this.context.lineTo(x + 200, y + 200);
          this.context.moveTo(x + 200, y);
          this.context.lineTo(x, y + 200);
        }
      }
      return this.context.stroke();
    };

    Board.prototype.wonorlost = function() {
      var line, piece, _i, _len, _ref;
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        piece = this[line[0]];
        if (piece && piece === this[line[1]] && piece === this[line[2]]) {
          return piece;
        }
      }
      if (__indexOf.call(this, null) >= 0) {
        return null;
      }
      return 0;
    };

    return Board;

  })(Array);

  Player = (function() {
    function Player(sengo) {
      this.sengo = sengo != null ? sengo : Const.CROSS;
      this.lookahead = __bind(this.lookahead, this);
      this.evaluation = __bind(this.evaluation, this);
      this.check = __bind(this.check, this);
      console.log(this.sengo);
    }

    Player.prototype.check = function(board) {
      var line, piece, _i, _len, _ref;
      _ref = board.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        piece = board[line[0]];
        if (piece && piece === board[line[1]] && piece === board[line[2]]) {
          return true;
        }
      }
      return false;
    };

    Player.prototype.evaluation = function(board) {
      var ret;
      return ret = (function() {
        switch (board.wonorlost()) {
          case Const.NOUGHT:
            return Const.MIN_VALUE;
          case Const.CROSS:
            return Const.MAX_VALUE;
          case Const.DRAW:
            return 0;
          default:
            return 0;
        }
      })();
    };

    Player.prototype.lookahead = function(board, turn, cnt, threshold) {
      var b, i, locate, ret, teban, temp_v, value, _i, _len;
      if (turn === Const.CROSS) {
        value = Const.MIN_VALUE;
      } else {
        value = Const.MAX_VALUE;
      }
      locate = null;
      for (i = _i = 0, _len = board.length; _i < _len; i = ++_i) {
        b = board[i];
        if (b === null) {
          board[i] = turn;
          if (cnt < Const.LIMIT && board.wonorlost() === null) {
            teban = (turn === Const.NOUGHT ? Const.CROSS : Const.NOUGHT);
            ret = this.lookahead(board, teban, cnt + 1, value);
            temp_v = ret.value;
          } else {
            temp_v = this.evaluation(board);
          }
          board[i] = null;
          if (temp_v >= value && turn === Const.CROSS) {
            value = temp_v;
            locate = i;
            if (threshold < temp_v) {
              break;
            }
          } else if (temp_v <= value && turn === Const.NOUGHT) {
            value = temp_v;
            locate = i;
            if (threshold > temp_v) {
              break;
            }
          }
        }
      }
      return {
        locate: locate,
        value: value
      };
    };

    return Player;

  })();

  Game = (function() {
    function Game() {
      this.prepared = __bind(this.prepared, this);
      this.gameover = __bind(this.gameover, this);
      this.setEventListener = __bind(this.setEventListener, this);
      this.touch = __bind(this.touch, this);
      this.optchange = __bind(this.optchange, this);
      this.btnstart = __bind(this.btnstart, this);
      this.board = new Board([null, null, null, null, null, null, null, null, null]);
      this.playing = false;
      this.man_player = new Player(Const.CROSS);
      this.cpu_player = new Player(Const.NOUGHT);
      this.orders = document.getElementsByName("optOrders");
      this.startbtn = document.getElementById("btnStart");
      this.statusarea = document.getElementById("spanStatus");
      this.setEventListener();
      this.board.display();
      this.status = null;
    }

    Game.prototype.btnstart = function(target) {
      var ret, threshold;
      console.log("game.btnstart");
      this.board.init();
      if (this.cpu_player.sengo === Const.CROSS) {
        threshold = Const.MAX_VALUE;
        ret = this.cpu_player.lookahead(this.board, this.cpu_player.sengo, 1, threshold);
        console.log(ret);
        this.board[ret.locate] = Const.CROSS;
      }
      this.board.display();
      return this.prepared();
    };

    Game.prototype.optchange = function(target) {
      console.log("game.optchange");
      if (target.context.value === "1") {
        this.man_player.sengo = Const.NOUGHT;
        this.cpu_player.sengo = Const.CROSS;
      } else {
        this.man_player.sengo = Const.CROSS;
        this.cpu_player.sengo = Const.NOUGHT;
      }
      console.log(this.man_player.sengo);
      return console.log(this.cpu_player.sengo);
    };

    Game.prototype.touch = function(target, clientX, clientY) {
      var clickX, clickY, judge, ret, threshold;
      console.log("game.touch");
      console.log(this.status);
      if (this.status == null) {
        console.log("cancel");
        return;
      }
      clickX = Math.floor((clientX - target[0].offsetLeft) / 200);
      clickY = Math.floor((clientY - target[0].offsetTop) / 200);
      if (this.board[clickX + clickY * 3] !== null) {
        console.log("not null");
        return;
      }
      this.board[clickX + clickY * 3] = this.man_player.sengo;
      judge = this.board.wonorlost();
      if (judge !== null) {
        console.log("judge=" + judge.toString());
      }
      if (judge !== null) {
        this.gameover(judge);
      } else {
        threshold = this.cpu_player.sengo === Const.CROSS ? Const.MAX_VALUE : Const.MIN_VALUE;
        ret = this.cpu_player.lookahead(this.board, this.cpu_player.sengo, 1, threshold);
        console.log(ret);
        this.board[ret.locate] = this.cpu_player.sengo;
        judge = this.board.wonorlost();
        if (judge !== null) {
          this.gameover(judge);
        }
      }
      return this.board.display();
    };

    Game.prototype.setEventListener = function() {
      $('#optOrder1').on('change', (function(_this) {
        return function(e) {
          var target;
          target = $(e.currentTarget);
          return _this.optchange(target);
        };
      })(this));
      $('#optOrder2').on('change', (function(_this) {
        return function(e) {
          var target;
          target = $(e.currentTarget);
          return _this.optchange(target);
        };
      })(this));
      $('#canvasMain').on('click', (function(_this) {
        return function(e) {
          var target;
          target = $(e.currentTarget);
          return _this.touch(target, e.clientX, e.clientY);
        };
      })(this));
      return $('#btnStart').on('click', (function(_this) {
        return function(e) {
          var target;
          target = $(e.currentTarget);
          return _this.btnstart(target);
        };
      })(this));
    };

    Game.prototype.gameover = function(winorless) {
      var msg, opt, _i, _len, _ref;
      console.log("game.gameover");
      this.status = null;
      _ref = this.orders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        opt = _ref[_i];
        opt.disabled = false;
      }
      this.startbtn.disabled = false;
      console.log(this.statusarea);
      msg = (function() {
        switch (winorless) {
          case Const.CROSS:
            return "×の勝ち";
          case Const.NOUGHT:
            return "◯の勝ち";
          case Const.DRAW:
            return "引き分け";
          default:
            return "";
        }
      })();
      return this.statusarea.innerHTML = msg;
    };

    Game.prototype.prepared = function() {
      var opt, _i, _len, _ref;
      console.log("game.prepared");
      this.status = true;
      _ref = this.orders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        opt = _ref[_i];
        opt.disabled = true;
      }
      this.startbtn.disabled = true;
      return this.statusarea.innerHTML = "";
    };

    return Game;

  })();

  window.Game = window.Game || Game;

}).call(this);
